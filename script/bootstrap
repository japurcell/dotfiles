#!/usr/bin/env bash
#
# bootstrap installs things.

set -euo pipefail

cd "$(dirname "$0")/.."
echo ''

#
# variables
#

RESET="\033[0m"
RED="\033[0;31m"
DOTFILES_ROOT=$(pwd -P)
dry_run=false
do_prompt=true
overwrite=false
merges=()

#
# functions
#

info () {
  printf "\r  [ \033[00;34m..\033[0m ] $1\n"
}

user () {
  printf "\r  [ \033[0;33m??\033[0m ] $1\n"
}

success () {
  printf "\r\033[2K  [ \033[00;32mOK\033[0m ] $1\n"
}

fail () {
  printf "\r\033[2K  [\033[0;31mFAIL\033[0m] $1\n"
  echo ''
  exit
}

setup_gitconfig () {
  if ! [[ -f git/gitconfig.local.symlink ]]
  then
    info 'setup gitconfig'

    git_credential='cache'
    if [[ "$(uname -s)" = "Darwin" ]]
    then
      git_credential='osxkeychain'
    fi

    user ' - What is your github author name?'
    read -e git_authorname
    user ' - What is your github author email?'
    read -e git_authoremail

    if [[ "$dry_run" = "true" ]]; then
      echo "git_credential=$git_credential
      git_authorname=$git_authorname
      git_authoremail=$git_authoremail"
    else
      sed -e "s/AUTHORNAME/$git_authorname/g" \
        -e "s/AUTHOREMAIL/$git_authoremail/g" \
        -e "s/GIT_CREDENTIAL_HELPER/$git_credential/g" git/gitconfig.local.symlink.example > git/gitconfig.local.symlink
    fi

    success 'gitconfig'
  fi
}

link_file () {
  local src=$1 dst=$2

  local overwrite= backup= skip=
  local action=

  if [ -f "$dst" -o -d "$dst" -o -L "$dst" ]
  then

    if [ "$overwrite_all" = "false" ] && [ "$backup_all" = "false" ] && [ "$skip_all" = "false" ]
    then

      local currentSrc="$(readlink $dst)"

      if [ "$currentSrc" = "$src" ]
      then

        skip=true;

      else

          user "File already exists: $dst ($(basename "$src")), what do you want to do?\n\
          [s]kip, [S]kip all, [o]verwrite, [O]verwrite all, [b]ackup, [B]ackup all?"
          read -n 1 action

          case "$action" in
            o )
              overwrite=true;;
            O )
              overwrite_all=true;;
            b )
              backup=true;;
            B )
              backup_all=true;;
            s )
              skip=true;;
            S )
              skip_all=true;;
            * )
              ;;
          esac

      fi

    fi

    overwrite=${overwrite:-$overwrite_all}
    backup=${backup:-$backup_all}
    skip=${skip:-$skip_all}

    local fname_extension=$(basename -- "$src")
    local file_name="${fname_extension%.*}"
    # merge dst into src if skip is null and merges
    # contains a value matching src's filename
    if [[ "$skip" = "false" ]] && (( ${#merges[@]} )) && [[ "${merges[@]}" =~ "$file_name" ]]; then
      [[ "$dry_run" = "false" ]] && cat "$dst" >> "$src"
      success "merged $dst into $src"
    fi

    if [ "$overwrite" = "true" ]
    then
      [[ "$dry_run" = "false" ]] && rm -rf "$dst"
      success "removed $dst"
    fi

    if [ "$backup" = "true" ]
    then
      [[ "$dry_run" = "false" ]] && mv "$dst" "${dst}.backup"
      success "moved $dst to ${dst}.backup"
    fi

    if [ "$skip" = "true" ]
    then
      success "skipped $src"
    fi
  fi

  if [ "$skip" != "true" ]  # "false" or empty
  then
    [[ "$dry_run" = "false" ]] && ln -s "$1" "$2"
    success "linked $1 to $2"
  fi
}

install_dotfiles () {
  local overwrite_all=${1:-false} backup_all=false skip_all=false

  info "installing dotfiles; overwrite_all=$overwrite_all"

  for src in $(find -H "$DOTFILES_ROOT" -maxdepth 2 -name '*.symlink' -not -path '*.git*')
  do
    dst="$HOME/.$(basename "${src%.*}")"
    link_file "$src" "$dst"
  done
}

__error() {
    echo -e "${RED}error: $*${RESET}" 1>&2
}

__usage() {
    echo "Usage: $(basename "$BASH_SOURCE") [options]
Options:
    --dry-run|-d                      Just print effects
    --merge|-m                        Symlinks to merge into existing
    --quiet|-q                        No prompts; overwrite any existing
Description:
    This script installs all dotfiles.
"
}

__doit() {
  # allow skipping of prompts for things like docker builds
  if [[ "$do_prompt" = "true" ]]; then
    setup_gitconfig
  else
    overwrite=true
  fi

  install_dotfiles $overwrite

  info "installing dependencies"
  if ( [[ "$dry_run" = "true" ]] && source bin/dot -d || source bin/dot ) | while read -r data; do info "$data"; done
  then
    success "dependencies installed"
  else
    fail "error installing dependencies"
  fi

  echo ''
  echo '  All installed!'
}

__printf_bool () {
  [[ "${1:-false}" = "true" ]] && echo "true" || echo "false"
}

__dry_run() {
  echo -e "overwrite=$(__printf_bool "$overwrite")
do_prompt=$(__printf_bool "$do_prompt")"

  if (( ${#merges[@]} )); then
    local printout="merges="
    for i in "${merges[@]}"; do
      printout="$printout$i "
    done

    echo $printout
  fi
}

#
# main
#

if [[ $# = 0 ]]; then
    do_prompt=true
else
  while [[ $# -gt 0 ]]; do
      opt="$(echo "${1/#--/-}" | awk '{print tolower($0)}')"
      case "$opt" in
          -dry-run|-d)
            dry_run=true
            ;;
          -merge|-m)
            shift
            merge="${1:-}"
            [[ -z "$merge" ]] && __error "Missing value for parameter --merge" && __usage
            merges+=("$merge")
            ;;
          -quiet|-q)
            do_prompt=false
            ;;
          *)
            __error "Invalid parameter $opt" && __usage
            exit 1
            ;;
      esac
      shift
  done
fi

__doit